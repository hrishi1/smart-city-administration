/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.Appointment;
import model.City;
import model.CityDir;
import model.Community;
import model.CommunityDir;
import model.Doctor;
import model.Encounter;
import model.EncounterHistory;
import model.Hospital;
import model.HospitalDir;
import model.Patient;
import model.UserAuthDir;
import model.VitalSigns;

/**
 *
 * @author hrish
 */
public class StartAppPanel extends javax.swing.JPanel {

    private JSplitPane splitPane;
    private CityDir cityDir;
    private UserAuthDir userAuthDir;
    private String cityName;
    private String commName;
    private String hospName;
    private String docName;
    private String patientName;
    private Encounter enc;
    private EncounterHistory encHist;
    private VitalSigns vs;
    private String bodyTemperature;
    private int pulseRate;
    private int bloodPressure;
    private String encounterType;
    private String disease;
    private CommunityDir communityDir;

    /**
     * Creates new form StartAppPanel
     */
    public StartAppPanel() {
        initComponents();
    }
    
    public StartAppPanel(CityDir cityDir, UserAuthDir userAuthDir, JSplitPane splitPane, String cityName, String commName, String hospName, String docName, String patientName) {
        initComponents();
        
        this.splitPane = splitPane;
        this.cityDir = cityDir;
        this.userAuthDir = userAuthDir;
        this.cityName = cityName;
        this.commName = commName;
        this.hospName = hospName;
        this.docName = docName;
        this.patientName = patientName;
        
        ButtonGroup g1 = new ButtonGroup();
        
        g1.add(radioEmg);
        g1.add(radioOPD);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDisease = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        radioEmg = new javax.swing.JRadioButton();
        radioOPD = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtTemp = new javax.swing.JTextField();
        txtPulse = new javax.swing.JTextField();
        txtPressure = new javax.swing.JTextField();
        btnComplete = new javax.swing.JButton();
        btnBackToDoc = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setText("Disease:");

        jLabel2.setText("Encounter Type:");

        radioEmg.setText("Emergency");

        radioOPD.setText("OPD");

        jLabel3.setText("Body temperature:");

        jLabel4.setText("Pulse rate:");

        jLabel5.setText("Blood pressure:");

        btnComplete.setText("Complete Appointment");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        btnBackToDoc.setText("Back to Doctor Panel");
        btnBackToDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToDocActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel6.setText("                                          Diagnosis Portal");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(btnBackToDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnComplete)
                    .addComponent(txtPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDisease, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioEmg)
                        .addGap(18, 18, 18)
                        .addComponent(radioOPD)))
                .addContainerGap(480, Short.MAX_VALUE))
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDisease, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnBackToDoc))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(radioEmg)
                    .addComponent(radioOPD))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(btnComplete)
                .addContainerGap(227, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
        
        disease = txtDisease.getText();
        bodyTemperature = txtTemp.getText();
        pulseRate = Integer.parseInt(txtPulse.getText());
        bloodPressure = Integer.parseInt(txtPressure.getText());
        
        //Radio buttons
        
        if(radioEmg.isSelected() == true) {
            encounterType = "Emergency";
        }
        else {
            encounterType = "OPD";
        }
        
        
        ArrayList<City> cDir = cityDir.getCityDir();

        for(City c: cDir) {
            if(c.getCityName().equalsIgnoreCase(cityName)) {

                communityDir = c.getCommunityDir(); // communityDir.getCommunityDir();

                ArrayList<Community> comDir = communityDir.getCommunityDir();

                for(Community com: comDir) {
                    if(com.getCommunityName().equalsIgnoreCase(commName)) {

                        HospitalDir hospitalDir = com.getHospitalDir();
                        ArrayList<Hospital> hospDir = hospitalDir.getHospitalDir();

                        for(Hospital h: hospDir) {
                            if(h.getHospitalName().equalsIgnoreCase(hospName)) {
                                
                                for(Doctor d: h.getDoctorDir().getDoctorDir()) {
                                    
                                    if(d.getName().equalsIgnoreCase(docName)) {
                                        
                                        
                                        if(d.getEncounterHistory() != null) {
                                            
                                            
                                            vs = new VitalSigns();
                                            vs.setBloodPressure(bloodPressure);
                                            vs.setBodyTemperature(bodyTemperature);
                                            vs.setPulseRate(pulseRate);
                                            
                                            encHist = d.getEncounterHistory();
                                            enc = encHist.addNewEncounter();
                                            
                                            enc.setDisease(disease);
                                            enc.setDoctorName(docName);
                                            enc.setEncounterType(encounterType);
                                            enc.setHospitalName(hospName);
                                            enc.setPatientName(patientName);
                                            enc.setV(vs);
                                            
                                        }
                                        
                                        else {
                                            vs = new VitalSigns();
                                            vs.setBloodPressure(bloodPressure);
                                            vs.setBodyTemperature(bodyTemperature);
                                            vs.setPulseRate(pulseRate);
                                            
                                            encHist = new EncounterHistory();
                                            enc = encHist.addNewEncounter();
                                            
                                            enc.setDisease(disease);
                                            enc.setDoctorName(docName);
                                            enc.setEncounterType(encounterType);
                                            enc.setHospitalName(hospName);
                                            enc.setPatientName(patientName);
                                            enc.setV(vs);
                                            
                                            d.setEncounterHistory(encHist);
                                            
                                        }
                                        
                                        ArrayList<Appointment> app = d.getAppDir().getAppointmentDir();
                                        
                                        for(Appointment a:app) {
                                            if(a.getPatientName() == patientName) {
                                                d.getAppDir().deleteAppointment(a);
                                            }
                                        }
                                    }
                                }
                                
                                for(Patient p: h.getPatientDir().getPatientDir()) {
                                    
                                    if(p.getName().equalsIgnoreCase(patientName)) {
                                        
                                        if(p.getEncounterHistory() != null) {
                                            
                                            vs = new VitalSigns();
                                            vs.setBloodPressure(bloodPressure);
                                            vs.setBodyTemperature(bodyTemperature);
                                            vs.setPulseRate(pulseRate);
                                            
                                            encHist = p.getEncounterHistory();
                                            enc = encHist.addNewEncounter();
                                            
                                            enc.setDisease(disease);
                                            enc.setDoctorName(docName);
                                            enc.setEncounterType(encounterType);
                                            enc.setHospitalName(hospName);
                                            enc.setPatientName(patientName);
                                            enc.setV(vs);
                                            
                                            
                                            
                                            JOptionPane.showMessageDialog(this, "Appointment complete!");
                                            
                                        }
                                        
                                        else {
                                            
                                            vs = new VitalSigns();
                                            vs.setBloodPressure(bloodPressure);
                                            vs.setBodyTemperature(bodyTemperature);
                                            vs.setPulseRate(pulseRate);
                                            
                                            encHist = new EncounterHistory();
                                            enc = encHist.addNewEncounter();
                                            
                                            enc.setDisease(disease);
                                            enc.setDoctorName(docName);
                                            enc.setEncounterType(encounterType);
                                            enc.setHospitalName(hospName);
                                            enc.setPatientName(patientName);
                                            enc.setV(vs);
                                            
                                            p.setEncounterHistory(encHist);
                                            
                                            JOptionPane.showMessageDialog(this, "Appointment complete!");
                                            
                                            
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnCompleteActionPerformed

    private void btnBackToDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToDocActionPerformed
        // TODO add your handling code here:
        DoctorPanel s = new DoctorPanel(cityDir, userAuthDir, splitPane, cityName, commName, hospName, docName);//cityDir,uaDir);

        splitPane.setRightComponent(s);
        
    }//GEN-LAST:event_btnBackToDocActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackToDoc;
    private javax.swing.JButton btnComplete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButton radioEmg;
    private javax.swing.JRadioButton radioOPD;
    private javax.swing.JTextField txtDisease;
    private javax.swing.JTextField txtPressure;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtTemp;
    // End of variables declaration//GEN-END:variables
}
