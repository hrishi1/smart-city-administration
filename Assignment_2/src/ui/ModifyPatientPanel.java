/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDir;
import model.Community;
import model.CommunityDir;
import model.Doctor;
import model.DoctorDir;
import model.Hospital;
import model.HospitalDir;
import model.House;
import model.HouseDir;
import model.Patient;
import model.PatientDir;
import model.Person;
import model.PersonDir;
import model.UserAuthDir;

/**
 *
 * @author hrish
 */
public class ModifyPatientPanel extends javax.swing.JPanel {

    private JSplitPane splitPane;
    private UserAuthDir userAuthDir;
    private CityDir cityDir;
    private CommunityDir communityDir;
    private String fName;
    private String insured;
    private String caller;

    /**
     * Creates new form ModifyPatientPanel
     */
    public ModifyPatientPanel() {
        initComponents();
    }
    
    public ModifyPatientPanel(CityDir cityDir, UserAuthDir userAuthDir, JSplitPane splitPane, String caller) {
        initComponents();
        
        this.splitPane = splitPane;
        this.cityDir = cityDir;
        this.userAuthDir = userAuthDir;
        this.caller = caller;
        
        ButtonGroup g1 = new ButtonGroup();
        
        g1.add(radioYes);
        g1.add(radioNo);
        
        populateCitiesTable();
    }
    
        private void populatePatients(PatientDir patDir) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        DefaultTableModel model = (DefaultTableModel) tblPatients.getModel();
        model.setRowCount(0);
        
        for(Patient c : patDir.getPatientDir()) {
            
            Object[] row = new Object[11];
            row[0] = c.getName();
            row[1] = c.getInsured();
            
            model.addRow(row);
            
        } 
    }
    
    private void populateCitiesTable() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        // House Table        
        DefaultTableModel model = (DefaultTableModel) tblCities.getModel();
        model.setRowCount(0);
        
        if(cityDir.getCityDir() != null) {
        for(City c : cityDir.getCityDir()) {
            
            Object[] row = new Object[11];
            //row[0] = house;
            row[0] = c.getCityName();

            
            model.addRow(row);
        }
        }
    }
    
    private void populateHospitalsHousesTable(HospitalDir hospitalDir, HouseDir houseDir) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        DefaultTableModel model = (DefaultTableModel) tblHospitals.getModel();
        model.setRowCount(0);
        
        for(Hospital c : hospitalDir.getHospitalDir()) {
            
            Object[] row = new Object[11];
            //row[0] = house;
            row[0] = c.getHospitalName();
            row[1] = c.getRating();
            row[2] = c.getHospitalType();

            
            model.addRow(row);
            
//        model = (DefaultTableModel) tblHouses.getModel();
//        model.setRowCount(0);
//        
//        for(House h : houseDir.getHouseDir()) {
//            
//            row = new Object[11];
//            //row[0] = house;
//            row[0] = h.getHouseID();
//
//            
//            model.addRow(row);
            
//        } 
            
        } 
    }
    
    private void populateCommunitiesTable(CommunityDir communityDir) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
        DefaultTableModel model = (DefaultTableModel) tblCommunities.getModel();
        model.setRowCount(0);
        
        for(Community c : communityDir.getCommunityDir()) {
            
            Object[] row = new Object[11];
            //row[0] = house;
            row[0] = c.getCommunityName();
            row[1] = c.getMajorityReligion();
            row[2] = c.getCommunityType();

            
            model.addRow(row);
            
        }                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        txtFname = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHospitals = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCommunities = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblCities = new javax.swing.JTable();
        btnUpdatePatient = new javax.swing.JButton();
        btnDispCommunities = new javax.swing.JButton();
        btnDispHospitalsHouses = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        btnDispPatients = new javax.swing.JButton();
        btnDeletePatients = new javax.swing.JButton();
        radioYes = new javax.swing.JRadioButton();
        radioNo = new javax.swing.JRadioButton();
        btnBack = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setText("First Name:");

        jLabel8.setText("Insured:");

        tblHospitals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Hospital(s)"
            }
        ));
        jScrollPane1.setViewportView(tblHospitals);

        tblCommunities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Communities"
            }
        ));
        jScrollPane3.setViewportView(tblCommunities);

        tblCities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Cities"
            }
        ));
        jScrollPane4.setViewportView(tblCities);

        btnUpdatePatient.setText("Update Patient");
        btnUpdatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePatientActionPerformed(evt);
            }
        });

        btnDispCommunities.setText("Display Communities");
        btnDispCommunities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDispCommunitiesActionPerformed(evt);
            }
        });

        btnDispHospitalsHouses.setText("Display Hospitals");
        btnDispHospitalsHouses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDispHospitalsHousesActionPerformed(evt);
            }
        });

        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "First Name", "Insured"
            }
        ));
        jScrollPane2.setViewportView(tblPatients);

        btnDispPatients.setText("Display Patients");
        btnDispPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDispPatientsActionPerformed(evt);
            }
        });

        btnDeletePatients.setText("Delete Patients");
        btnDeletePatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePatientsActionPerformed(evt);
            }
        });

        radioYes.setText("Yes");

        radioNo.setText("No");

        btnBack.setText("Back to Modify");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel15.setBackground(new java.awt.Color(0, 153, 102));
        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel15.setText("                                Modify Patients");
        jLabel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(btnDispCommunities))
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDispHospitalsHouses)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(160, 160, 160)
                                .addComponent(btnDispPatients)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeletePatients, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addComponent(btnUpdatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel8))
                                .addGap(92, 92, 92)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(radioYes)
                                        .addGap(18, 18, 18)
                                        .addComponent(radioNo)))))))
                .addContainerGap(213, Short.MAX_VALUE))
            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel15)
                .addGap(65, 65, 65)
                .addComponent(btnBack)
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDispCommunities)
                    .addComponent(btnDispHospitalsHouses)
                    .addComponent(btnDispPatients)
                    .addComponent(btnDeletePatients))
                .addGap(89, 89, 89)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioYes)
                            .addComponent(radioNo)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel8)))
                .addGap(49, 49, 49)
                .addComponent(btnUpdatePatient)
                .addContainerGap(210, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePatientActionPerformed

        //Getting all the data from user input
        fName = txtFname.getText();

        //Radio buttons
        
        if(radioYes.isSelected() == true) {
            insured = "Yes";
        }
        else if(radioNo.isSelected() == true) {
            insured = "No";
        }        
        else {
            JOptionPane.showMessageDialog(this, "Please select patient insured!");
        }

        int selectedRowIndex = tblCities.getSelectedRow();

        if (selectedRowIndex < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a city.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblCities.getModel();
        String selectedCity = (String) model.getValueAt(selectedRowIndex, 0);

        selectedRowIndex = tblCommunities.getSelectedRow();

        if (selectedRowIndex < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a community.");
            return;
        }

        model = (DefaultTableModel) tblCommunities.getModel();
        String selectedCommunity = (String) model.getValueAt(selectedRowIndex, 0);

        selectedRowIndex = tblHospitals.getSelectedRow();

        if (selectedRowIndex < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a hospital.");
            return;
        }

        model = (DefaultTableModel) tblHospitals.getModel();
        String selectedHospital = (String) model.getValueAt(selectedRowIndex, 0);

        //        selectedRowIndex = tblHouses.getSelectedRow();
        //
        //        if (selectedRowIndex < 0 ) {
            //
            //            JOptionPane.showMessageDialog(this, "Please select a hospital.");
            //            return;
            //        }
        //
        //
        //        model = (DefaultTableModel) tblHouses.getModel();
        //        String selectedHouse = (String) model.getValueAt(selectedRowIndex, 0);
        //

        selectedRowIndex = tblPatients.getSelectedRow();

        if (selectedRowIndex < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a patient.");
            return;
        }

        model = (DefaultTableModel) tblPatients.getModel();
        String patientName = (String) model.getValueAt(selectedRowIndex, 0);

        //Traversing cities to find the selected city
        ArrayList<City> cDir = cityDir.getCityDir();

        for(City c: cDir) {
            if(c.getCityName().equalsIgnoreCase(selectedCity)) {
                CommunityDir communityDir = c.getCommunityDir();

                //Traversing communities to find the selected community
                ArrayList<Community> comDir = communityDir.getCommunityDir();

                for(Community com: comDir) {
                    if(com.getCommunityName().equalsIgnoreCase(selectedCommunity)) {

                        HospitalDir hospitalDir = com.getHospitalDir();
                        HouseDir houseDir = com.getHouseDir();

                        //Traversing hospitals to find the selected hospital
                        ArrayList<Hospital> hDir = hospitalDir.getHospitalDir();

                        for(Hospital h: hDir) {
                            if(h.getHospitalName().equalsIgnoreCase(selectedHospital))
                            {
                                //If patientDir already present in the selected Hospital
                                if(h.getPatientDir() != null) {

                                    PatientDir patDir = h.getPatientDir();

                                    ArrayList<Patient> dir = patDir.getPatientDir();

                                    for(Patient d : dir) {

                                        if(d.getName().equalsIgnoreCase(patientName)) {
                                            
                                            d.setName(fName);
                                            d.setInsured(insured);

//                                            Patient updatedPat = new Patient();
//                                            
//                                            updatedPat.setName(fName);
//                                            updatedPat.setInsured(insured);
//
//                                            patDir.updatePatient(d, updatedPat);

                                            populatePatients(patDir);

                                            String patientHouse = d.getHouseID();

                                            //Traversing houses to find the selected house
                                            ArrayList<House> hoDir = houseDir.getHouseDir();

                                            for(House hs: hoDir) {
                                                if(hs.getHouseID().equalsIgnoreCase(patientHouse))
                                                {

                                                    //If personDir already present in the selected House
                                                    if(hs.getPersonDir() != null) {

                                                        PersonDir personDir = hs.getPersonDir();

                                                        ArrayList<Person> pDir = personDir.getPersonDir();

                                                        for(Person p: pDir) {

                                                            if(p.getFname().equalsIgnoreCase(patientName)) {
                                                                
                                                                  p.setFname(fName);

//                                                                Person person = new Person();
//
//                                                                person.setFname(fName);
//
//                                                                personDir.updatePerson(p, person);
                                                                
                                                                JOptionPane.showMessageDialog(this, "Patient updated!");

                                                            }
                                                        }

                                                    }

                                                    //Test
//                                                    PersonDir personDir = hs.getPersonDir();
//                                                    ArrayList<Person> p_temp = personDir.getPersonDir();
//
//                                                    for(Person p : p_temp) {
//                                                        System.out.println("person:"+p.getFname());
//                                                    }
                                                }
                                            }

                                            break;
                                        }
                                    }
                                }
                                //Test
                                //                                                                doctorDir = h.getPatientDir();
                                //                                                                ArrayList<Patient> p_temp = doctorDir.getPatientDir();
                                //
                                //                                                                for(Patient p : p_temp) {
                                    //                                                                        System.out.println("doctor:"+p.getQualification());
                                    //                                                                    }

                            }
                        }
                    }

                }
            }
        }
    }//GEN-LAST:event_btnUpdatePatientActionPerformed

    private void btnDispCommunitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispCommunitiesActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblCities.getSelectedRow();

        if (selectedRowIndex < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }

        DefaultTableModel model;
        model = (DefaultTableModel) tblCities.getModel();
        String cityName = (String) model.getValueAt(selectedRowIndex, 0);

        ArrayList<City> cDir = cityDir.getCityDir();

        for(City c: cDir) {
            if(c.getCityName() == (cityName)) {
                if(c.getCommunityDir() != null) {
                    populateCommunitiesTable(c.getCommunityDir());
                }
                else {
                    populateCommunitiesTable(new CommunityDir());
                }
        }
        }
    }//GEN-LAST:event_btnDispCommunitiesActionPerformed

    private void btnDispHospitalsHousesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispHospitalsHousesActionPerformed
        // TODO add your handling code here:

        int selectedRowIndexCity = tblCities.getSelectedRow();

        if (selectedRowIndexCity < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a city.");
            return;
        }

        DefaultTableModel model;
        model = (DefaultTableModel) tblCities.getModel();
        String cityName = (String) model.getValueAt(selectedRowIndexCity, 0);

        ArrayList<City> cDir = cityDir.getCityDir();

        for(City c: cDir) {
            if(c.getCityName() == (cityName)) {

                int selectedRowIndex = tblCommunities.getSelectedRow();

                if (selectedRowIndex < 0 ) {

                    JOptionPane.showMessageDialog(this, "Please select a community.");
                    return;
                }

                ///DefaultTableModel model;
                model = (DefaultTableModel) tblCommunities.getModel();
                String communityName = (String) model.getValueAt(selectedRowIndex, 0);

                communityDir = c.getCommunityDir(); // communityDir.getCommunityDir();

                ArrayList<Community> comDir = communityDir.getCommunityDir();

                for(Community com: comDir) {
                    if(com.getCommunityName().contains(communityName)) {
                        if(com.getHospitalDir() != null) {
                            populateHospitalsHousesTable(com.getHospitalDir(),com.getHouseDir());
                        }
                        else {
                            populateHospitalsHousesTable(new HospitalDir(), new HouseDir());
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDispHospitalsHousesActionPerformed

    private void btnDispPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispPatientsActionPerformed
        // TODO add your handling code here:

        int selectedRowIndexCity = tblCities.getSelectedRow();

        if (selectedRowIndexCity < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a city.");
            return;
        }

        DefaultTableModel model;
        model = (DefaultTableModel) tblCities.getModel();
        String cityName = (String) model.getValueAt(selectedRowIndexCity, 0);

        ArrayList<City> cDir = cityDir.getCityDir();

        for(City c: cDir) {
            if(c.getCityName().equalsIgnoreCase(cityName)) {

                int selectedRowIndex = tblCommunities.getSelectedRow();

                if (selectedRowIndex < 0 ) {

                    JOptionPane.showMessageDialog(this, "Please select a community.");
                    return;
                }

                ///DefaultTableModel model;
                model = (DefaultTableModel) tblCommunities.getModel();
                String communityName = (String) model.getValueAt(selectedRowIndex, 0);

                selectedRowIndex = tblHospitals.getSelectedRow();

                if (selectedRowIndex < 0 ) {

                    JOptionPane.showMessageDialog(this, "Please select a Hospital.");
                    return;
                }

                ///DefaultTableModel model;
                model = (DefaultTableModel) tblHospitals.getModel();
                String hospitalName = (String) model.getValueAt(selectedRowIndex, 0);

                communityDir = c.getCommunityDir(); // communityDir.getCommunityDir();

                ArrayList<Community> comDir = communityDir.getCommunityDir();

                for(Community com: comDir) {
                    if(com.getCommunityName().equalsIgnoreCase(communityName)) {

                        HospitalDir hospitalDir = com.getHospitalDir();
                        ArrayList<Hospital> hospDir = hospitalDir.getHospitalDir();

                        for(Hospital h: hospDir) {
                            if(h.getHospitalName().equalsIgnoreCase(hospitalName)) {

                                if (h.getPatientDir() != null) {
                                    populatePatients(h.getPatientDir());
                                }
                                else {
                                    populatePatients(new PatientDir());
                                }
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_btnDispPatientsActionPerformed

    private void btnDeletePatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePatientsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndexCity = tblCities.getSelectedRow();

        if (selectedRowIndexCity < 0 ) {

            JOptionPane.showMessageDialog(this, "Please select a city.");
            return;
        }

        DefaultTableModel model;
        model = (DefaultTableModel) tblCities.getModel();
        String cityName = (String) model.getValueAt(selectedRowIndexCity, 0);

        ArrayList<City> cDir = cityDir.getCityDir();

        for(City c: cDir) {
            if(c.getCityName().equalsIgnoreCase(cityName)) {

                int selectedRowIndex = tblCommunities.getSelectedRow();

                if (selectedRowIndex < 0 ) {

                    JOptionPane.showMessageDialog(this, "Please select a community.");
                    return;
                }

                ///DefaultTableModel model;
                model = (DefaultTableModel) tblCommunities.getModel();
                String communityName = (String) model.getValueAt(selectedRowIndex, 0);

                selectedRowIndex = tblHospitals.getSelectedRow();

                if (selectedRowIndex < 0 ) {

                    JOptionPane.showMessageDialog(this, "Please select a hospital.");
                    return;
                }

                ///DefaultTableModel model;
                model = (DefaultTableModel) tblHospitals.getModel();
                String hospitalName = (String) model.getValueAt(selectedRowIndex, 0);

                selectedRowIndex = tblPatients.getSelectedRow();

                if (selectedRowIndex < 0 ) {

                    JOptionPane.showMessageDialog(this, "Please select a doctor.");
                    return;
                }

                ///DefaultTableModel model;
                model = (DefaultTableModel) tblPatients.getModel();
                String patientName = (String) model.getValueAt(selectedRowIndex, 0);

                communityDir = c.getCommunityDir(); // communityDir.getCommunityDir();

                ArrayList<Community> comDir = communityDir.getCommunityDir();

                for(Community com: comDir) {
                    if(com.getCommunityName().equalsIgnoreCase(communityName)) {

                        HospitalDir hospitalDir = com.getHospitalDir();
                        ArrayList<Hospital> hospDir = hospitalDir.getHospitalDir();

                        for(Hospital h: hospDir) {
                            if(h.getHospitalName().equalsIgnoreCase(hospitalName)) {

                                if (h.getPatientDir() != null) {

                                    PatientDir patDir = h.getPatientDir();

                                    ArrayList<Patient> dir = patDir.getPatientDir();

                                    for(Patient d : dir) {

                                        if(d.getName().equalsIgnoreCase(patientName)) {

                                            patDir.deletePatient(d);
                                            populatePatients(patDir);

                                            String doctorHouse = d.getHouseID();

                                            //Traversing houses to find the selected house
                                            HouseDir houseDir = com.getHouseDir();
                                            ArrayList<House> hoDir = houseDir.getHouseDir();

                                            for(House hs: hoDir) {
                                                if(hs.getHouseID().equalsIgnoreCase(doctorHouse))
                                                {
                                                    //If personDir already present in the selected House
                                                    if(hs.getPersonDir() != null) {

                                                        PersonDir personDir = hs.getPersonDir();

                                                        ArrayList<Person> pDir = personDir.getPersonDir();

                                                        for(Person p: pDir) {

                                                            if(p.getFname().equalsIgnoreCase(patientName)) {

                                                                personDir.deletePerson(p);
                                                                break;

                                                            }
                                                        }

                                                    }

                                                    //Test
//                                                    PersonDir personDir = hs.getPersonDir();
//                                                    ArrayList<Person> p_temp = personDir.getPersonDir();
//
//                                                    for(Person p : p_temp) {
//                                                        System.out.println("person:"+p.getFname());
//                                                    }
                                                }
                                            }

                                            break;
                                        }
                                    }
                                }
                                else {
                                    JOptionPane.showMessageDialog(this, "No Patients available.");
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnDeletePatientsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:

        if(caller == "SysAdmin") {
            SysAdminRUDPanel s = new SysAdminRUDPanel(cityDir, userAuthDir, splitPane);//cityDir,uaDir);

        splitPane.setRightComponent(s);
        }
        else if(caller == "HospAdmin") {
            HAModifyPanel s = new HAModifyPanel(cityDir, userAuthDir, splitPane);//cityDir,uaDir);

        splitPane.setRightComponent(s);
        }

    }//GEN-LAST:event_btnBackActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeletePatients;
    private javax.swing.JButton btnDispCommunities;
    private javax.swing.JButton btnDispHospitalsHouses;
    private javax.swing.JButton btnDispPatients;
    private javax.swing.JButton btnUpdatePatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JRadioButton radioNo;
    private javax.swing.JRadioButton radioYes;
    private javax.swing.JTable tblCities;
    private javax.swing.JTable tblCommunities;
    private javax.swing.JTable tblHospitals;
    private javax.swing.JTable tblPatients;
    private javax.swing.JTextField txtFname;
    // End of variables declaration//GEN-END:variables
}
